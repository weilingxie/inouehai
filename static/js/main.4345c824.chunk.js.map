{"version":3,"sources":["components/Result.tsx","components/ResultButtons.tsx","components/MatchSheet.tsx","components/ScoreBoard.tsx","App.tsx","index.tsx"],"names":["Result","index","type","result","resetResult","className","onClick","ResultButtons","team1","team2","setResult","color","name","MatchSheet","fights","changeColor","map","fight","id","suburi","kihon","kata","ScoreBoard","score","t","App","useState","InitialFights","setFights","InitialScore","setScore","winTeam","newFights","team","newScore","i","sort","addScore","resetTeam","removeScore","team1Color","team2Color","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4345c824.chunk.js","sourcesContent":["import React from 'react'\n\ninterface ResultProps {\n    index:number,\n    type:string,\n    result:string,\n    resetResult:(index:number,type:string, result:string)=>void\n}\n\nconst Result = ({index, type, result, resetResult} :ResultProps)  => {\n    \n    return (       \n        <div>\n            <span>{result} </span>\n            <button \n                className=\"btn btn-sm btn-outline-primary\" \n                onClick={()=> resetResult(index,type, result)}>\n                reset\n            </button>\n        </div>         \n    );\n}\n\nexport default Result;","import React from 'react'\n\ninterface ResultButtonProps {\n    index:number,\n    type:string,\n    team1:{\n        name:string,\n        color:string,\n    },\n    team2:{\n        name:string,\n        color:string,\n    },\n    setResult : (index:number,type:string,name:string) => void\n}\n\nconst ResultButtons = ({index, type, team1, team2, setResult} :ResultButtonProps)  => {\n    \n    return (       \n        <div>\n            <button \n                className= {`btn btn-${team1.color==='red'?'danger':'light'}`} \n                onClick={()=> setResult(index,type,team1.name)}>\n                {team1.name}\n            </button>\n            <button  \n                className= {`btn btn-${team2.color==='red'?'danger':'light'}`} \n                onClick={()=> setResult(index,type,team2.name)}>\n                {team2.name}\n            </button>\n        </div>\n    );\n}\n\nexport default ResultButtons;","import React from 'react'\nimport Result from './Result'\nimport ResultButtons from './ResultButtons'\n\nimport { Fight } from '../types/Types'\n\n\n\ninterface MatchSheetProps {\n    fights: Fight[];\n    resetResult:(index:number,type:string, result:string)=>void;\n    setResult : (index:number,type:string,name:string) => void;\n    changeColor : (index:number) => void;\n\n}\n\nconst MatchSheet = ({ fights, setResult, resetResult, changeColor } : MatchSheetProps) => {    \n\n    return (       \n        <div>            \n            <h3  className=\"text-center\">Fights</h3>\n            <table className=\"table table-striped\">\n                <thead>\n                    <tr>\n                        <th>#</th>\n                        <th>Versus</th>\n                        <th>Suburi</th>\n                        <th>Kihon</th>\n                        <th>Kata</th>\n                        <th></th>\n                    </tr>\n                </thead>\n                <tbody>                    \n                    {\n                        fights.map((fight,index)=>{\n                            let { id, team1, team2, suburi, kihon, kata } = fight;                                                      \n\n                            return (\n                                <tr key={id}>\n                                    <td>{id}</td>\n                                    <td>{team1.name}-{team2.name}</td>                                    \n                                    <td>{suburi===\"\" ? <ResultButtons index={index} type='suburi' team1={team1} team2={team2} setResult={setResult} /> : <Result index={index} type='suburi' result={suburi} resetResult={resetResult} />}</td>\n                                    <td>{kihon===\"\" ? <ResultButtons index={index} type='kihon' team1={team1} team2={team2} setResult={setResult} /> : <Result index={index} type='kihon' result={kihon} resetResult={resetResult} />}</td>\n                                    <td>{kata===\"\" ? <ResultButtons index={index} type='kata' team1={team1} team2={team2} setResult={setResult} /> : <Result index={index} type='kata' result={kata} resetResult={resetResult} />}</td>                                    \n                                    <td><button className=\"btn btn-sm btn-success\" onClick={()=>changeColor(index)}>switch color</button></td>\n                                </tr>\n                            )                        \n                        })\n                    }                \n                </tbody>\n            </table>\n        </div>\n    );\n}\n\nexport default MatchSheet;","import React from 'react'\nimport { Score } from '../types/Types'\n\n\ninterface ScoreBoardProps {\n    score: Score[];\n}\n\nconst ScoreBoard = ({ score } : ScoreBoardProps) => {    \n\n    return (       \n        <div>\n            <h3 className=\"text-center\">Score Board</h3>\n            <table className=\"table table-striped\">                \n                <thead>\n                    <tr>\n                        <th>Team</th>\n                        <th>Score</th>\n                    </tr>\n                </thead>\n                <tbody>                    \n                    {\n                        score.map((t, index) => (\n                            <tr key={index+999}>\n                                <td>{t.name}</td>\n                                <td>{t.score}</td>\n                            </tr>\n                        ))                                                                                 \n                    }\n                </tbody>\n            </table>         \n        </div>\n    );\n}\n\nexport default ScoreBoard;","\nimport React, { useState} from 'react'\nimport { Fight, Score } from './types/Types'\nimport InitialFights from './default/InitialFights.json'\nimport InitialScore from './default/InitialScore.json'\nimport MatchSheet from './components/MatchSheet'\nimport ScoreBoard from './components/ScoreBoard'\nimport './App.css';\n\nfunction App() {\n\n  const [fights, setFights ] = useState<Fight[]>(InitialFights);\n    const [score, setScore] = useState<Score[]>(InitialScore);\n\n    const addScore = (team:string) => {\n        let newScore = [...score];\n\n        let index = -1;\n        newScore.map((t, i) => {\n            if(t.name === team) index = i;\n            return i;\n        });\n\n        newScore[index]= {...newScore[index], score: newScore[index].score+1};\n\n        newScore.sort((team1,team2)=>(team1.score>team2.score) ? -1 : 1)\n        \n        setScore(newScore);\n    }\n\n    const removeScore = (team:string) => {\n        let newScore = [...score];\n        let index = -1;\n        newScore.map((t, i) => {\n            if(t.name === team) index = i;\n            return i;\n        });\n        newScore[index]= {...newScore[index], score: newScore[index].score-1};\n\n        newScore.sort((team1,team2)=>(team1.score>team2.score) ? -1 : 1)\n        \n        setScore(newScore);\n    }\n    \n    const setResult = (index:number, type: string, winTeam: string): void => {\n        let newFights = [...fights];\n        newFights[index] = {...newFights[index], [type]:winTeam};\n        setFights(newFights);\n        \n        addScore(winTeam);\n    }\n\n    const resetResult = (index:number, type: string, resetTeam:string) => {\n        let newFights = [...fights];\n        newFights[index] = {...newFights[index], [type]:\"\"};\n        setFights(newFights);\n        removeScore(resetTeam);\n    }\n\n    const changeColor = (index:number) => {\n        let newFights = [...fights];\n        let team1Color = newFights[index].team1.color;\n        let team2Color = newFights[index].team2.color;\n        newFights[index].team1.color =  team2Color;\n        newFights[index].team2.color =  team1Color;\n        setFights(newFights);\n    }\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"row align-items-center justify-content-center\">          \n          <div className=\"sm-12 md-8 lg-6\">\n            <h1>Inoue Hai Kihon Competition</h1>\n            <ScoreBoard score={score} />\n            <br />\n            <br />\n            <MatchSheet fights={fights} setResult={setResult} resetResult={resetResult} changeColor={changeColor}  />\n          </div> \n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}