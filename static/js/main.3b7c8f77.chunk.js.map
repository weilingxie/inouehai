{"version":3,"sources":["components/Result.tsx","components/ResultButtons.tsx","components/MatchSheet.tsx","contexts/ConfigContext.tsx","store/Store.js","App.tsx","index.tsx"],"names":["Result","index","type","result","resetResult","className","onClick","ResultButtons","team1","team2","setResult","color","name","MatchSheet","useState","InitialFights","fights","setFights","InitialScore","score","setScore","winTeam","newFights","team","newScore","map","t","i","sort","addScore","resetTeam","removeScore","fight","id","suburi","kihon","kata","team1Color","team2Color","changeColor","ConfigContext","createContext","config","NumberOfTeams","Store","children","setConfig","Provider","value","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3b7c8f77.chunk.js","sourcesContent":["import React from 'react'\n\ninterface ResultProps {\n    index:number,\n    type:string,\n    result:string,\n    resetResult:(index:number,type:string, result:string)=>void\n}\n\nconst Result = ({index, type, result, resetResult} :ResultProps)  => {\n    \n    return (       \n        <div>\n            <span>{result} </span>\n            <button \n                className=\"btn btn-sm btn-outline-primary\" \n                onClick={()=> resetResult(index,type, result)}>\n                reset\n            </button>\n        </div>         \n    );\n}\n\nexport default Result;","import React from 'react'\n\ninterface ResultButtonProps {\n    index:number,\n    type:string,\n    team1:{\n        name:string,\n        color:string,\n    },\n    team2:{\n        name:string,\n        color:string,\n    },\n    setResult : (index:number,type:string,name:string) => void\n}\n\nconst ResultButtons = ({index, type, team1, team2, setResult} :ResultButtonProps)  => {\n    \n    return (       \n        <div>\n            <button \n                className= {`btn btn-${team1.color==='red'?'danger':'light'}`} \n                onClick={()=> setResult(index,type,team1.name)}>\n                {team1.name}\n            </button>\n            <button  \n                className= {`btn btn-${team2.color==='red'?'danger':'light'}`} \n                onClick={()=> setResult(index,type,team2.name)}>\n                {team2.name}\n            </button>\n        </div>\n    );\n}\n\nexport default ResultButtons;","import React, { useState } from 'react'\nimport Result from './Result'\nimport ResultButtons from './ResultButtons'\nimport { Fight, Score } from '../types/Types'\nimport InitialFights from '../default/InitialFights.json'\nimport InitialScore from '../default/InitialScore.json'\n\nconst MatchSheet = () => {\n    const [fights, setFights ] = useState<Fight[]>(InitialFights);\n    const [score, setScore] = useState<Score[]>(InitialScore);    \n\n    const addScore = (team:string) => {\n        let newScore = [...score];\n\n        let index = -1;\n        newScore.map((t, i) => {\n            if(t.name === team) index = i;\n            return i;\n        });\n\n        newScore[index]= {...newScore[index], score: newScore[index].score+1};\n\n        newScore.sort((team1,team2)=>(team1.score>team2.score) ? -1 : 1)\n        \n        setScore(newScore);\n    }\n\n    const removeScore = (team:string) => {\n        let newScore = [...score];\n        let index = -1;\n        newScore.map((t, i) => {\n            if(t.name === team) index = i;\n            return i;\n        });\n        newScore[index]= {...newScore[index], score: newScore[index].score-1};\n\n        newScore.sort((team1,team2)=>(team1.score>team2.score) ? -1 : 1)\n        \n        setScore(newScore);\n    }\n    \n    const setResult = (index:number, type: string, winTeam: string): void => {\n        let newFights = [...fights];\n        newFights[index] = {...newFights[index], [type]:winTeam};\n        setFights(newFights);\n        \n        addScore(winTeam);\n    }\n\n    const resetResult = (index:number, type: string, resetTeam:string) => {\n        let newFights = [...fights];\n        newFights[index] = {...newFights[index], [type]:\"\"};\n        setFights(newFights);\n        removeScore(resetTeam);\n    }\n\n    const changeColor = (index:number) => {\n        let newFights = [...fights];\n        let team1Color = newFights[index].team1.color;\n        let team2Color = newFights[index].team2.color;\n        newFights[index].team1.color =  team2Color;\n        newFights[index].team2.color =  team1Color;\n        setFights(newFights);\n    }\n\n    return (       \n        <div>\n            <h3 className=\"text-center\">Score Board</h3>\n            <table className=\"table table-striped\">                \n                <thead>\n                    <tr>\n                        <th>Team</th>\n                        <th>Score</th>\n                    </tr>\n                </thead>\n                <tbody>                    \n                    {\n                        score.map((t, index) => (\n                            <tr key={index+999}>\n                                <td>{t.name}</td>\n                                <td>{t.score}</td>\n                            </tr>\n                        ))                                                                                 \n                    }\n                </tbody>\n            </table>\n            <hr />\n            <h3  className=\"text-center\">Fights</h3>\n            <table className=\"table table-striped\">\n                <thead>\n                    <tr>\n                        <th>#</th>\n                        <th>Versus</th>\n                        <th>Suburi</th>\n                        <th>Kihon</th>\n                        <th>Kata</th>\n                        <th></th>\n                    </tr>\n                </thead>\n                <tbody>                    \n                    {\n                        fights.map((fight,index)=>{\n                            let { id, team1, team2, suburi, kihon, kata } = fight;                                                      \n\n                            return (\n                                <tr key={id}>\n                                    <td>{id}</td>\n                                    <td>{team1.name}-{team2.name}</td>                                    \n                                    <td>{suburi===\"\" ? <ResultButtons index={index} type='suburi' team1={team1} team2={team2} setResult={setResult} /> : <Result index={index} type='suburi' result={suburi} resetResult={resetResult} />}</td>\n                                    <td>{kihon===\"\" ? <ResultButtons index={index} type='kihon' team1={team1} team2={team2} setResult={setResult} /> : <Result index={index} type='kihon' result={kihon} resetResult={resetResult} />}</td>\n                                    <td>{kata===\"\" ? <ResultButtons index={index} type='kata' team1={team1} team2={team2} setResult={setResult} /> : <Result index={index} type='kata' result={kata} resetResult={resetResult} />}</td>                                    \n                                    <td><button className=\"btn btn-sm btn-success\" onClick={()=>changeColor(index)}>switch color</button></td>\n                                </tr>\n                            )                        \n                        })\n                    }                \n                </tbody>\n            </table>\n        </div>\n    );\n}\n\nexport default MatchSheet;","import React, { createContext } from 'react'\n import { IConfig } from '../types/Types'\n\nexport type ConfigContextPros = {\n    config: IConfig,\n    setConfig?: React.Dispatch<React.SetStateAction<IConfig>>\n}\n\nconst ConfigContext = createContext<ConfigContextPros>({ \n    config: { NumberOfTeams : 5 }\n});\n\nexport default ConfigContext ;","import React, { useState, useMemo } from 'react';\r\nimport ConfigContext from '../contexts/ConfigContext';\r\nimport { IConfig } from '../types/Types'\r\n\r\nconst Store = ({ children }) => {\r\n    const [ config, setConfig ] = useState({\r\n        NumberOfTeams : 5      \r\n    }); \r\n\r\n    // const providerConfig = useMemo(() => ({config, setConfig}),  [ config, setConfig ]);    \r\n\r\n    return (\r\n    <ConfigContext.Provider value={{ config, setConfig }}>\r\n      {children}\r\n    </ConfigContext.Provider>\r\n    );\r\n};\r\n\r\nexport default Store;","\nimport React from 'react'\nimport Setup from './Setup'\nimport MatchSheet from './components/MatchSheet'\nimport Store from './store/Store'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Store>\n      <div className=\"container\">\n        <div className=\"row align-items-center justify-content-center\">          \n          <div className=\"col-6\">\n            <h1>Inoue Hai Kihon Competition</h1>            \n            <MatchSheet />\n          </div> \n        </div>\n      </div>\n    </Store>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}